import OpenAI from "openai";
import { Document, Packer, Paragraph, HeadingLevel, Footer, AlignmentType } from "docx";

export const dynamic = "force-dynamic";

/* ============================= Types ============================= */

type Inputs = {
  niche?: string;
  audience?: string;
  product_or_service?: string;
  primary_platform?: string;
  tone?: string;
  video_comfort?: string;
  monthly_goal?: string;
  content_balance?: number | string;
  hashtag_style?: string;
  special_instructions?: string;
  location?: string;
};

type DayItem = {
  hook: string;
  caption: string;
  video_idea: string;
  filming_directions: Array<{ start_s: number; end_s: number; instruction: string; overlay: string }>;
  editing_notes: string[];
  cta: string;
  hashtags: string[];
  posting_suggestion: string;
  platform_notes: string;
};

type Plan = { days: DayItem[] };

/* ============================= Prompt ============================= */

function buildPrompt(data: Inputs): string {
  const lines: string[] = [];
  lines.push("ROLE: Return a single compact JSON object only.");
  lines.push("No markdown, no code fences, no commentary.");
  lines.push("Use double quotes for all keys and strings. No trailing commas. ASCII only.");
  lines.push("TOP LEVEL: include a property named 'days' that is an array with exactly 30 items.");
  lines.push("PER-DAY KEYS (exact): 'hook', 'caption', 'video_idea', 'filming_directions', 'editing_notes', 'cta', 'hashtags', 'posting_suggestion', 'platform_notes'.");
  lines.push("FILMING_DIRECTIONS: array of 5-7 objects. Each object has: 'start_s' (integer), 'end_s' (integer), 'instruction' (step-by-step filming guidance for beginners: where to stand, what to film, how to move), 'overlay' (<= 6 words, Title Case, max 1 emoji).");
  lines.push("Each filming direction must be plain, actionable, and beginner-friendly (e.g., 'Stand 6 ft back, hold steady, pan left slowly').");
  lines.push("Sprinkle occasional quick checks (e.g., 'Check: Is text readable?').");
  lines.push("Add safety cues ONLY if obvious (e.g., chemicals â†’ '(Wear Gloves)').");
  lines.push("TIMING: Filming directions must ascend and fit platform norms: TikTok 12â€“16s, Reels 8â€“12s, Shorts 15â€“25s, LinkedIn 20â€“45s.");
  lines.push("EDITING_NOTES: array of 3-5 varied, specific techniques matched to the idea.");
  lines.push("HASHTAGS: array of 4-6 all-lowercase, niche-aware, prefixed with '#'; avoid generic fillers.");
  lines.push("CTA: fresh and specific; avoid generic lines.");
  lines.push("POSTING_SUGGESTION: brief timing/packaging tip.");
  lines.push("PLATFORM_NOTES: short note tailored to major platforms when relevant.");
  lines.push("QUALITY GUARDRAILS: No cliches, no repetitive phrasing, no filler. Hooks must be punchy and varied.");
  lines.push("Keep captions human and specific, not generic.");
  lines.push("Return JSON only.");

  // Inputs (exact values, empties allowed)
  lines.push("Niche: " + (data.niche ?? "") + ".");
  lines.push("Audience: " + (data.audience ?? "") + ".");
  lines.push("Product or service: " + (data.product_or_service ?? "") + ".");
  lines.push("Primary platform: " + (data.primary_platform ?? "") + ".");
  lines.push("Tone: " + (data.tone ?? "") + ".");
  lines.push("Video comfort: " + (data.video_comfort ?? "") + ".");
  if (data.content_balance !== undefined && data.content_balance !== null) {
    lines.push("Content balance target: " + String(data.content_balance) + " percent educational; distribute across 30 days.");
  } else {
    lines.push("Content balance target: .");
  }
  lines.push("Monthly goal: " + (data.monthly_goal ?? "") + ".");
  lines.push("Hashtag style: " + (data.hashtag_style ?? "") + ".");
  lines.push("Location: " + (data.location ?? "") + ".");
  lines.push("Special instructions: " + (data.special_instructions ?? "") + ".");

  return lines.join("\n");
}

/* ============================= Coercion ============================= */

function coercePlan(raw: any): Plan {
  // Helper: prefix hashtags with '#'
  function normalizeTags(arr: any): string[] {
    const tg = Array.isArray(arr) ? arr : [];
    return tg.map((t: any) => {
      const s = String(t || '').trim();
      return s.startsWith('#') ? s : ('#' + s.replace(/^#+/, ''));
    });
  }
  // Helper: map storyboard -> filming_directions when needed
  function mapShots(arr: any): Array<{ start_s: number; end_s: number; instruction: string; overlay: string }> {
    const sb = Array.isArray(arr) ? arr : [];
    return sb.map((s: any) => ({
      start_s: Number((s && s.start_s) || 0),
      end_s: Number((s && s.end_s) || 0),
      instruction: String((s && (s.instruction || s.direction || s.step || '')) || ''),
      overlay: String((s && s.overlay) || '')
    }));
  }

  if (!raw || typeof raw !== 'object' || !Array.isArray(raw.days)) return { days: [] };
  const out: DayItem[] = [];
  for (let i = 0; i < raw.days.length; i++) {
    const d = raw.days[i] || {};
    const fdSrc = Array.isArray(d.filming_directions) ? d.filming_directions : (Array.isArray(d.storyboard) ? d.storyboard : []);
    const fd = mapShots(fdSrc);
    const ed = Array.isArray(d.editing_notes) ? d.editing_notes : [];
    const tg = normalizeTags(d.hashtags);

    out.push({
      hook: String(d.hook || ''),
      caption: String(d.caption || ''),
      video_idea: String(d.video_idea || ''),
      filming_directions: fd,
      editing_notes: ed.map((e: any) => String(e || '')),
      cta: String(d.cta || ''),
      hashtags: tg,
      posting_suggestion: String(d.posting_suggestion || ''),
      platform_notes: String(d.platform_notes || '')
    });
  }
  return { days: out };
};
  const out: DayItem[] = [];
  for (let i = 0; i < raw.days.length; i++) {
    const d = raw.days[i] || {};
    const fd = Array.isArray(d.filming_directions) ? d.filming_directions : [];
    const ed = Array.isArray(d.editing_notes) ? d.editing_notes : [];
    const tg = Array.isArray(d.hashtags) ? d.hashtags : [];
    out.push({
      hook: String(d.hook || ""),
      caption: String(d.caption || ""),
      video_idea: String(d.video_idea || ""),
      filming_directions: fd.map((s: any) => ({
        start_s: Number((s && s.start_s) || 0),
        end_s: Number((s && s.end_s) || 0),
        instruction: String((s && s.instruction) || ""),
        overlay: String((s && s.overlay) || "")
      })),
      editing_notes: ed.map((e: any) => String(e || "")),
      cta: String(d.cta || ""),
      hashtags: tg.map((t: any) => (t.startsWith("#") ? String(t) : "#" + String(t || ""))),
      posting_suggestion: String(d.posting_suggestion || ""),
      platform_notes: String(d.platform_notes || "")
    });
  }
  return { days: out };
}

function ensureExactly30(plan: Plan): Plan {
  function fallbackDay(i: number): DayItem {
    return {
      hook: "Hook " + String(i + 1),
      caption: "Caption " + String(i + 1),
      video_idea: "Idea " + String(i + 1),
      filming_directions: [
        { start_s: 0, end_s: 3, instruction: "Stand back, film subject wide", overlay: "Step 1" },
        { start_s: 4, end_s: 7, instruction: "Move closer, focus detail", overlay: "Step 2" },
        { start_s: 8, end_s: 12, instruction: "Show action with steady hand", overlay: "Step 3" },
        { start_s: 13, end_s: 16, instruction: "End with outcome shot", overlay: "Result" }
      ],
      editing_notes: ["Tight cuts", "On-screen text", "Native captions"],
      cta: "Try this today and tag us.",
      hashtags: ["#tips", "#guide", "#howto", "#niche"],
      posting_suggestion: "Post in your audience prime evening hour.",
      platform_notes: "Add captions for TikTok/Reels."
    };
  }

  let days = Array.isArray(plan.days) ? plan.days.slice(0, 30) : [];
  while (days.length < 30) days.push(fallbackDay(days.length));
  return { days };
}

/* ============================= DOCX ============================= */

function buildDocx(plan: Plan, meta: Inputs): Promise<Buffer> {
  function h1(text: string) { return new Paragraph({ text, heading: HeadingLevel.HEADING_1 }); }
  function h2(text: string) { return new Paragraph({ text, heading: HeadingLevel.HEADING_2 }); }
  function p(text: string)  { return new Paragraph({ text }); }

  // Simple emoji limiter: default 0; if tone contains "witty", allow 1 per day (extra stripped at render)
  const allowOneEmoji = (meta && typeof meta.tone === 'string' && /witty/i.test(meta.tone || '')) ? true : false;
  const emojiRegex = /[\u{1F300}-\u{1FAFF}\u{1F1E6}-\u{1F1FF}]/u;
  function stripExtraEmojis(s: string, remaining: { n: number }): string {
    let out = '';
    for (const ch of s) {
      if (emojiRegex.test(ch)) {
        if (remaining.n > 0) { out += ch; remaining.n--; }
        // else drop
      } else {
        out += ch;
      }
    }
    return out;
  }

  // Cover: content balance display
  let edu = '';
  let ent = '';
  if (meta && meta.content_balance !== undefined && meta.content_balance !== null && meta.content_balance !== '') {
    const v = Number(meta.content_balance);
    if (!isNaN(v)) {
      const vc = Math.max(0, Math.min(100, Math.round(v)));
      edu = String(vc) + '% educational';
      ent = String(100 - vc) + '% entertaining';
    }
  }

  const children: any[] = [];

  // Title + generated date + divider + inputs
  children.push(new Paragraph({ text: 'QuickPostKit - 30-Day Plan', heading: HeadingLevel.TITLE }));
  children.push(p('Generated: ' + new Date().toISOString().slice(0, 10)));
  children.push(p('----------------------------------------'));
  children.push(p('Niche: ' + (meta.niche || '')));
  children.push(p('Audience: ' + (meta.audience || '')));
  children.push(p('Product or Service: ' + (meta.product_or_service || '')));
  children.push(p('Primary Platform: ' + (meta.primary_platform || '')));
  children.push(p('Tone: ' + (meta.tone || '')));
  children.push(p('Video Comfort: ' + (meta.video_comfort || '')));
  children.push(p('Monthly Goal: ' + (meta.monthly_goal || '')));
  children.push(p('Content Balance: ' + (edu ? (ent ? (edu + ' / ' + ent) : edu) : '')));
  children.push(p('Hashtag Style: ' + (meta.hashtag_style || '')));
  children.push(p('Special Instructions: ' + (meta.special_instructions || '')));
  children.push(p('Location: ' + (meta.location || '')));
  children.push(p(''));

  // -------- Quick Guide (for using this download) --------
  children.push(h1('Quick Guide â€“ How To Use This Download'));
  const qg = [
    'Skim Day 1â€“3 and pick one to film today.',
    'Follow the Filming Directions step-by-step. Move slowly; keep each step ~1â€“3s.',
    'Add short on-screen text (Title Case, â‰¤6 words). Keep text in top/bottom safe area.',
    'Hook must be visible by 0â€“2s. Show motion or contrast early.',
    'If you need a trending sound, see Appendix A and pair it after editing.',
    'Aim for 5â€“7 steps total; keep the final result on screen for 1s.',
    'Post at your audienceâ€™s peak hour. Reply to early comments within 20 minutes.'
  ];
  for (const s of qg) children.push(p('- ' + s));
  children.push(p(''));

  // -------- 30 Days --------
  for (let i = 0; i < plan.days.length; i++) {
    const d = plan.days[i];

    // Emoji budget per day
    const budget = { n: allowOneEmoji ? 1 : 0 };

    // Build hashtags line (already normalized with # in coercePlan)
    const hashLine = (Array.isArray(d.hashtags) ? d.hashtags : []).join(' ');

    children.push(h1('Day ' + String(i + 1)));
    children.push(p('Hook: ' + stripExtraEmojis(d.hook, budget)));
    children.push(p('Caption: ' + stripExtraEmojis(d.caption, budget)));
    children.push(p('Video Idea: ' + d.video_idea));

    children.push(h2('Filming Directions'));
    const steps = Array.isArray((d as any).filming_directions) ? (d as any).filming_directions
                 : (Array.isArray((d as any).storyboard) ? (d as any).storyboard : []);
    for (const s of steps) {
      const overlay = s.overlay ? (' | On-screen text: ' + stripExtraEmojis(s.overlay, budget)) : '';
      children.push(p('[' + String(s.start_s) + '-' + String(s.end_s) + 's] ' + stripExtraEmojis(s.instruction, budget) + overlay));
    }

    children.push(h2('Editing Notes'));
    for (const e of (Array.isArray(d.editing_notes) ? d.editing_notes : [])) children.push(p('- ' + stripExtraEmojis(String(e || ''), budget)));
    children.push(p('CTA: ' + stripExtraEmojis(d.cta, budget)));
    children.push(p('Hashtags: ' + hashLine));
    children.push(p('Posting Suggestion: ' + d.posting_suggestion));
    children.push(p('Platform Notes: ' + d.platform_notes));
    children.push(p(''));
  }

  // -------- Platform-Specific Guide --------
  children.push(h1('Platform-Specific Guide'));
  children.push(h2('TikTok'));
  for (const s of [
    'Hook by 0â€“2s with motion or contrast.',
    '12â€“16s total; fast beats; align one text hit to the beat.',
    'Use rising sounds in your niche (see Appendix A).',
    'End with a clear action: save, share, comment a keyword.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Instagram Reels'));
  for (const s of [
    '8â€“12s; crisp cuts; color pop.',
    'Strong cover frame; readable title.',
    'Use native text styles; add location tag when relevant.',
    'Test 3 caption lengths: micro, short, story.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('YouTube Shorts'));
  for (const s of [
    '15â€“25s; allow one explanatory step.',
    'Clear narration or on-screen text for context.',
    'CTA to a longer video or resources in description.',
    'Consistent thumbnail style for the Shorts shelf.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('LinkedIn'));
  for (const s of [
    '20â€“45s explainers; lead with a stat, proof, or mini case.',
    'Subtitles required; many watch muted.',
    'Text above video: 2-line value summary.',
    'Tag people/companies only when relevant.'
  ]) children.push(p('- ' + s));

  // Extra spacing BEFORE Recycling Plan
  children.push(p(''));
  children.push(p(''));

  // -------- Recycling Plan --------
  children.push(h1('Recycling Plan'));
  for (const s of [
    'Turn top 3 hooks into carousels (6â€“8 frames).',
    'Combine 3 similar tips into a 30s roundup.',
    'Make a before/after split-screen of your best result.',
    'Cut a vertical teaser for YouTube; link long-form.',
    'Convert 1 explainer into a talking-head + B-roll remix.',
    'Reply-on-video to 5 comments as rapid Q&A.',
    'Turn 2 best captions into email subject lines and send.',
    'Save good shots to a B-roll library for future edits.'
  ]) children.push(p('- ' + s));

  // Extra spacing AFTER Recycling Plan and BEFORE Cheat Sheet
  children.push(p(''));
  children.push(p(''));

  // -------- Cheat Sheet --------
  children.push(h1('Cheat Sheet'));
  children.push(h2('Hooks'));
  for (const s of [
    'Start with an outcome or bold claim.',
    'Show the result first, then rewind.',
    'Flip an objection: â€œYou think X, but actuallyâ€¦â€'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Filming'));
  for (const s of [
    'Natural light if possible; face a window.',
    'Alternate distance: full view â†’ close detail â†’ action â†’ reaction.',
    'One motivated move per step; avoid digital zoom unless you are a photographer.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Editing'));
  for (const s of [
    'Average cut ~0.7â€“1.2s; reset visuals every 3â€“4s.',
    'Large readable text; keep in safe zones.',
    'Align at least one text hit to the beat.'
  ]) children.push(p('- ' + s));

  // Extra spacing AFTER Cheat Sheet and BEFORE Evergreen
  children.push(p(''));
  children.push(p(''));

  // -------- Evergreen Content Ideas --------
  children.push(h1('Evergreen Content Ideas'));
  for (const s of [
    'Myth vs Fact in your niche.',
    '3 quick tips that solve a common pain.',
    'Mini demo with before/after.',
    'FAQ bite with on-screen text only.',
    'Case study: problem â†’ process â†’ result.',
    'Price vs value breakdown in 20 seconds.',
    'Tool or gear loadout for beginners.',
    'Origin story: why you started.',
    'Challenge viewers to try one small action.',
    'Testimonial highlight with overlay text.'
  ]) children.push(p('- ' + s));

  // Extra spacing AFTER Evergreen and BEFORE Appendices
  children.push(p(''));
  children.push(p(''));

  // -------- Appendices Aâ€“F --------
  children.push(h1('Appendix A - How to Find Trending Sounds (Detailed)'));
  children.push(h2('TikTok'));
  for (const s of [
    'Use TikTok Creative Center: Songs â†’ Rising; set country and niche.',
    'Open a candidate audio; check top recent videos for pacing and captions.',
    'Save 10â€“20 candidates labeled by vibe (high-energy, calm, storytelling).',
    'In-app search: niche keyword + â€œsoundâ€; prefer steady week-over-week growth.',
    'Rule of fit: if the first 2s donâ€™t support your visual hook, skip it.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Instagram Reels'));
  for (const s of [
    'Professional Dashboard â†’ Audio; pick 10kâ€“150k uses trending upward.',
    'Tap audio name â†’ Save Audio; preview against your 0â€“2s hook.',
    'From a strong Reel, tap audio to inspect formats that win in your niche.',
    'Update your saved audio list weekly; remove tracks that cooled off.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('YouTube Shorts'));
  for (const s of [
    'Use mobile â€œSoundsâ€ picker â†’ Trending tab; confirm beats align to step hits.',
    'Avoid overused tracks that drown narration; favor percussive cues for text hits.',
    'Check top Shorts using the sound in the last 7 days for format alignment.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix B - 10-Beats Script Framework (Expanded)'));
  for (const s of [
    'Hook (0â€“2s): outcome first or bold claim.',
    'Context: who this is for in 1 line.',
    'Promise: what they get today.',
    'Step 1: short command + on-screen label.',
    'Step 2: show with motion; avoid talking head if not comfortable.',
    'Step 3: close detail proof or counterexample.',
    'Proof: stat, time-lapse, or split-screen.',
    'Objection flip: â€œYou think X, but actually â€¦â€',
    'Result: show payoff or before/after.',
    'CTA: one specific action tied to goal.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix C - Filming & Edit Cheats (Expanded)'));
  for (const s of [
    'Framing: alternate full view â†’ close detail â†’ action â†’ reaction.',
    'Movement: 1 motivated move per step (pan/tilt/push-in/handheld).',
    'Lighting: face a window; avoid mixed color temps.',
    'Text: â‰¤6 words per hit; keep in safe zones.',
    'Rhythm: cut on motion; add 1 beat-synced text hit at hook.',
    'SFX: one subtle whoosh/pop on payoff; donâ€™t spam.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix D - Weekly Batch Plan (Step-by-Step)'));
  for (const s of [
    'Mon: collect 10 hooks, 5 sound candidates, 5 proofs.',
    'Tue: outline 7 filming directions with 5â€“7 steps each.',
    'Wed: batch film in 60â€“90 minutes with fixed lighting.',
    'Thu: edit all in one block; export 8â€“16s where possible.',
    'Fri: schedule posts; prep 3 quick replies to common comments.',
    'Weekend: engage 20 minutes after posting; save best comments.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix E - Posting Checklist (Detailed)'));
  for (const s of [
    'Cover: readable title; contrasty frame.',
    'Hook: first text hit by 0â€“2s with motion.',
    'Length: stay in platform range; donâ€™t ramble.',
    'Captions: 1â€“2 sentences in natural voice.',
    'Hashtags: 4â€“6 niche-aware; mix volumes.',
    'CTA: 1 specific action; no doubles.',
    'Pin winners; remix top posts next week.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix F - Filming Quick Guide'));
  for (const s of [
    'Start steady. Move slowly. Keep steps 1â€“3s.',
    'Alternate distance: full view â†’ close detail â†’ action â†’ reaction.',
    'Use natural light where possible; face a window.',
    'Donâ€™t pinch to zoom unless youâ€™re a photographer; step closer instead.',
    'Overlay text: Title Case, â‰¤6 words, max 1 emoji across the whole day.',
    'Place text in top/bottom safe areasâ€”never over the subject.',
    'End on the result and hold for 1s.'
  ]) children.push(p('- ' + s));

  // Footer
  const cSign = String.fromCharCode(0x00A9);
  const footerText = cSign + ' 2025 Fifth Element Labs - Practical AI at the right price';
  const doc = new Document({
    sections: [
      {
        properties: {},
        footers: {
          default: new Footer({
            children: [ new Paragraph({ text: footerText, alignment: AlignmentType.CENTER }) ]
          })
        },
        children
      }
    ]
  });

  return Packer.toBuffer(doc);
}); }
  function h2(text: string) { return new Paragraph({ text, heading: HeadingLevel.HEADING_2 }); }
  function p(text: string)  { return new Paragraph({ text }); }

  let edu = "";
  let ent = "";
  if (meta && meta.content_balance !== undefined && meta.content_balance !== null && meta.content_balance !== "") {
    const v = Number(meta.content_balance);
    if (!isNaN(v)) {
      const vc = Math.max(0, Math.min(100, Math.round(v)));
      edu = String(vc) + "% educational";
      ent = String(100 - vc) + "% entertaining";
    }
  }

  const children: any[] = [];

  // Cover
  children.push(new Paragraph({ text: "QuickPostKit - 30-Day Plan", heading: HeadingLevel.TITLE }));
  children.push(p("Generated: " + new Date().toISOString().slice(0, 10)));
  children.push(p("----------------------------------------"));
  children.push(p("Niche: " + (meta.niche || "")));
  children.push(p("Audience: " + (meta.audience || "")));
  children.push(p("Product or Service: " + (meta.product_or_service || "")));
  children.push(p("Primary Platform: " + (meta.primary_platform || "")));
  children.push(p("Tone: " + (meta.tone || "")));
  children.push(p("Video Comfort: " + (meta.video_comfort || "")));
  children.push(p("Monthly Goal: " + (meta.monthly_goal || "")));
  children.push(p("Content Balance: " + (edu ? (ent ? (edu + " / " + ent) : edu) : "")));
  children.push(p("Hashtag Style: " + (meta.hashtag_style || "")));
  children.push(p("Special Instructions: " + (meta.special_instructions || "")));
  children.push(p("Location: " + (meta.location || "")));
  children.push(p(""));

  // Days
  for (let i = 0; i < plan.days.length; i++) {
    const d = plan.days[i];
    children.push(h1("Day " + String(i + 1)));
    children.push(p("Hook: " + d.hook));
    children.push(p("Caption: " + d.caption));
    children.push(p("Video Idea: " + d.video_idea));
    children.push(h2("Filming Directions"));
    for (const s of d.filming_directions) {
      children.push(p("[" + String(s.start_s) + "-" + String(s.end_s) + "s] " + s.instruction + " | Overlay: " + s.overlay));
    }
    children.push(h2("Editing Notes"));
    for (const e of d.editing_notes) children.push(p("- " + e));
    children.push(p("CTA: " + d.cta));
    children.push(p("Hashtags: " + d.hashtags.join(" ")));
    children.push(p("Posting Suggestion: " + d.posting_suggestion));
    children.push(p("Platform Notes: " + d.platform_notes));
    children.push(p(""));
  }

  // Appendices Aâ€“E (same as before) + F
  children.push(h1("Appendix F - Filming Quick Guide"));
  for (const s of [
    "Always film in good light; face a window if indoors.",
    "Hold your phone with two hands; keep elbows tucked.",
    "Turn on gridlines to center subjects.",
    "Donâ€™t pinch to zoom unless using pro camera gear; step closer instead.",
    "Overlay text: Title Case, â‰¤6 words, max 1 emoji.",
    "Keep overlays in top/bottom safe zones.",
    "Aim for 5-7 clear steps per video.",
    "Hook the viewer in first 2s.",
    "Sprinkle quick checks: Is text readable? Is subject clear?"
  ]) children.push(p("- " + s));

  const cSign = String.fromCharCode(0x00A9);
  const footerText = cSign + " 2025 Fifth Element Labs - Practical AI at the right price";

  const doc = new Document({
    sections: [
      {
        properties: {},
        footers: {
          default: new Footer({
            children: [ new Paragraph({ text: footerText, alignment: AlignmentType.CENTER }) ]
          })
        },
        children
      }
    ]
  });

  return Packer.toBuffer(doc);
}

/* ============================= HTTP Handler ============================= */

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => ({}));
    const data: Inputs = body || {};

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const prompt = buildPrompt(data);

    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      response_format: { type: "json_object" },
      messages: [
        { role: "system", content: "You are QPK Filmmaker AI â€“ generate JSON only. You output beginner-friendly filming directions (step-by-step). Replace 'storyboard' with 'filming_directions'. Always 5â€“7 steps. Sprinkle quick checks. Add safety cues only if obvious." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7
    });

    const raw = completion.choices[0]?.message?.content ?? "{}";
    let plan: Plan = { days: [] };
    try { plan = coercePlan(JSON.parse(raw)); } catch { plan = { days: [] }; }
    plan = ensureExactly30(plan);

    const buf = await buildDocx(plan, data);
    const fileName = "QuickPostKit_" + String(Date.now()) + ".docx";

    return new Response(buf, {
      status: 200,
      headers: {
        "Content-Type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "Content-Disposition": "attachment; filename=" + fileName
      }
    });
  } catch (err: any) {
    const msg = err?.message ? String(err.message) : "Unknown error";
    return new Response(JSON.stringify({ error: msg }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}
