import OpenAI from 'openai';
import { Document, Packer, Paragraph, HeadingLevel, Footer, AlignmentType } from 'docx';

export const dynamic = 'force-dynamic';

/* ============================= Types ============================= */

type Inputs = {
  niche?: string;
  audience?: string;
  product_or_service?: string;
  primary_platform?: string; // tiktok | instagram | youtube | linkedin
  tone?: string;
  video_comfort?: string;     // no_talking_head | talking_head | mixed
  monthly_goal?: string;
  content_balance?: number | string; // percent educational (frontend inverts)
  hashtag_style?: string;
  special_instructions?: string;
  location?: string;

  // backward-compat
  goal?: string;
};

type Step = { start_s: number; end_s: number; instruction: string; overlay: string };

type DayItem = {
  hook: string;
  caption: string;
  video_idea: string;
  filming_directions: Step[]; // normalized from either filming_directions or storyboard
  editing_notes: string[];
  cta: string;
  hashtags: string[];
  posting_suggestion: string;
  platform_notes: string;
};

type Plan = { days: DayItem[] };

/* ============================= Prompt ============================= */

function buildPrompt(data: Inputs): string {
  const lines: string[] = [];
  lines.push('ROLE: Return a single compact JSON object only.');
  lines.push('No markdown, no code fences, no commentary.');
  lines.push('Use double quotes for all keys and strings. No trailing commas. ASCII only.');
  lines.push('TOP LEVEL: include a property named "days" that is an array with exactly 30 items.');
  lines.push('PER-DAY KEYS (exact): "hook", "caption", "video_idea", "filming_directions", "editing_notes", "cta", "hashtags", "posting_suggestion", "platform_notes".');
  lines.push('FILMING_DIRECTIONS: array of 5-7 beginner steps. Each has: "start_s" (int), "end_s" (int), "instruction" (plain filming guidance: where to stand, what to film, how to move), "overlay" (<= 6 words, Title Case, max 1 emoji).');
  lines.push('Make steps actionable with simple verbs (stand, hold, move closer, tilt, show result). No jargon.');
  lines.push('Sprinkle quick checks occasionally (e.g., "Check: Is text readable?").');
  lines.push('Add safety cues only if obvious (e.g., chemicals -> "(Wear Gloves)").');
  lines.push('TIMING: steps must ascend; fit typical ranges by platform: TikTok 12-16s, Instagram Reels 8-12s, YouTube Shorts 15-25s, LinkedIn 20-45s. Hook visible by 0-2s.');
  lines.push('EDITING_NOTES: array of 3-5 varied, specific techniques matched to the idea.');
  lines.push('HASHTAGS: array of 4-6 all-lowercase, niche-aware; avoid generic fillers (hashes added later).');
  lines.push('CTA: fresh and specific; avoid generic lines.');
  lines.push('POSTING_SUGGESTION: brief timing or packaging tip.');
  lines.push('PLATFORM_NOTES: short note tailored to major platforms when relevant.');
  lines.push('QUALITY: No cliches, no repetitive phrasing, no filler. Hooks punchy and varied. Captions human and specific.');
  lines.push('Return JSON only.');

  // Inputs (exact values, empties allowed)
  lines.push('Niche: ' + (data.niche ?? '') + '.');
  lines.push('Audience: ' + (data.audience ?? '') + '.');
  lines.push('Product or service: ' + (data.product_or_service ?? '') + '.');
  lines.push('Primary platform: ' + (data.primary_platform ?? '') + '.');
  lines.push('Tone: ' + (data.tone ?? '') + '.');
  lines.push('Video comfort: ' + (data.video_comfort ?? '') + '.');
if ((data.video_comfort || '') === 'no_talking_head') {
  lines.push('NO_TALKING_HEAD HARD RULES: Do not show the creator\'s face or body facing the camera. Use hands-only, POV, product-only, or over-shoulder angles.');
  lines.push('REPLACE any "say/ speak/ selfie/ face the camera/ look at camera" with a non-talking alternative (hands/POV/product).');
  lines.push('BANNED PHRASES: face the camera; look at the camera; selfie mode; say:; speak to camera; address the viewer.');
  lines.push('PREFERRED ANGLES: hands-only, POV, product-only, over-shoulder.');
} else if ((data.video_comfort || '') === 'talking_head') {
  lines.push('TALKING_HEAD: Include 1â€“2 short "Say:" lines and head-and-shoulders framing.');
} else if ((data.video_comfort || '') === 'mixed') {
  lines.push('MIXED: Include at least one talking line and one text-only/hands-only step.');
}if (data.content_balance !== undefined && data.content_balance !== null) {
    lines.push('Content balance target: ' + String(data.content_balance) + ' percent educational; distribute across 30 days.');
  } else {
    lines.push('Content balance target: .');
  }
  lines.push('Monthly goal: ' + (data.monthly_goal ?? '') + '.');
  lines.push('Hashtag style: ' + (data.hashtag_style ?? '') + '.');
  lines.push('Location: ' + (data.location ?? '') + '.');
  lines.push('Special instructions: ' + (data.special_instructions ?? '') + '.');

  return lines.join('\n');
}

/* ============================= Coercion and Repair ============================= */

function coercePlan(raw: any): Plan {
  function normTags(arr: any): string[] {
    const tg = Array.isArray(arr) ? arr : [];
    return tg.map((t: any) => {
      const s = String(t || '').trim();
      return s.startsWith('#') ? s : ('#' + s.replace(/^#+/, ''));
    });
  }
  function mapSteps(arr: any): Step[] {
    const sb = Array.isArray(arr) ? arr : [];
    return sb.map((s: any) => ({
      start_s: Math.floor(Number((s && s.start_s) || 0)),
      end_s: Math.floor(Number((s && s.end_s) || 0)),
      instruction: String((s && (s.instruction || s.direction || s.step || '')) || ''),
      overlay: String((s && s.overlay) || '')
    }));
  }

  if (!raw || typeof raw !== 'object' || !Array.isArray(raw.days)) return { days: [] };
  const out: DayItem[] = [];
  for (let i = 0; i < raw.days.length; i++) {
    const d = raw.days[i] || {};
    const fdSrc = Array.isArray(d.filming_directions) ? d.filming_directions : (Array.isArray(d.storyboard) ? d.storyboard : []);
    out.push({
      hook: String(d.hook || ''),
      caption: String(d.caption || ''),
      video_idea: String(d.video_idea || ''),
      filming_directions: mapSteps(fdSrc),
      editing_notes: (Array.isArray(d.editing_notes) ? d.editing_notes : []).map((e: any) => String(e || '')),
      cta: String(d.cta || ''),
      hashtags: normTags(d.hashtags),
      posting_suggestion: String(d.posting_suggestion || ''),
      platform_notes: String(d.platform_notes || '')
    });
  }
  return { days: out };
}

function ensureExactly30(plan: Plan): Plan {
  function fallbackDay(i: number): DayItem {
    return {
      hook: 'Hook ' + String(i + 1),
      caption: 'Caption ' + String(i + 1),
      video_idea: 'Idea ' + String(i + 1),
      filming_directions: [
        { start_s: 0, end_s: 2, instruction: 'Stand back 6-8 ft and hold steady. Show the subject clearly.', overlay: 'Watch This' }

/* ===== Comfort Enforcement (no_talking_head auto-repair) ===== */
function enforceVideoComfort(plan: Plan, videoComfort: string): Plan {
  if (!plan || !Array.isArray(plan.days)) return plan;
  const mode = String(videoComfort || '').toLowerCase();
  if (mode !== 'no_talking_head') return plan;

  const banned = /(face\s+the\s+camera|look\s+at\s+the\s+camera|selfie|selfie\s+mode|say:|speak\s+to\s+camera|address\s+the\s+viewer)/i;

  function rewriteInstruction(ins: string): string {
    const s = String(ins || '');
    if (!banned.test(s)) return s;
    let out = s
      .replace(/say:.*$/i, '')
      .replace(/selfie(\s+mode)?/ig, '')
      .replace(/face\s+the\s+camera/ig, '')
      .replace(/look\s+at\s+the\s+camera/ig, '')
      .replace(/speak\s+to\s+camera/ig, '')
      .replace(/address\s+the\s+viewer/ig, '')
      .trim();
    if (!out || out.length < 6) {
      out = 'Show the action with your hands only from your point-of-view; keep your face off-camera.';
    } else {
      out = out + ' (Hands-only POV; keep your face off-camera.)';
    }
    return out;
  }

  const days = plan.days.map((d) => {
    const steps = Array.isArray(d.filming_directions) ? d.filming_directions : [];
    const fixed = steps.map((st) => ({
      start_s: Number(st && st.start_s || 0),
      end_s: Number(st && st.end_s || 0),
      instruction: rewriteInstruction(st && st.instruction || ''),
      overlay: String(st && st.overlay || '')
    }));
    return { ...d, filming_directions: fixed };
  });
  return { days };
},
        { start_s: 2, end_s: 5, instruction: 'Step closer until the subject fills most of the screen. Hold 2s.', overlay: 'Detail' },
        { start_s: 5, end_s: 9, instruction: 'Show the action with slow, smooth movement. Keep frame simple.', overlay: 'Action' },
        { start_s: 9, end_s: 12, instruction: 'End on the result. Hold for 1s before cutting.', overlay: 'Result' }
      ],
      editing_notes: ['Tight cuts', 'On-screen text', 'Native captions'],
      cta: 'Try this today and tag us.',
      hashtags: ['#tips', '#guide', '#howto', '#niche'],
      posting_suggestion: 'Post in your audience prime evening hour.',
      platform_notes: 'Add captions on TikTok/Reels.'
    };
  }

  const daysIn = Array.isArray(plan.days) ? plan.days.slice(0, 30) : [];
  const days: DayItem[] = [];
  for (let i = 0; i < 30; i++) {
    days.push(daysIn[i] || fallbackDay(i));
  }
  return { days };
}

/* ============================= DOCX ============================= */

function buildDocx(plan: Plan, meta: Inputs): Promise<Buffer> {
  function h1(text: string) { return new Paragraph({ text, heading: HeadingLevel.HEADING_1 }); }
  function h2(text: string) { return new Paragraph({ text, heading: HeadingLevel.HEADING_2 }); }
  function p(text: string)  { return new Paragraph({ text }); }

  // Emoji limiter: default 0; allow max 1 per day only if tone contains "witty"
  const allowOneEmoji = !!(meta && typeof meta.tone === 'string' && /witty/i.test(meta.tone || ''));
  const emojiRegex = /[\u{1F300}-\u{1FAFF}\u{1F1E6}-\u{1F1FF}]/u;
  function stripExtraEmojis(s: string, budget: { n: number }): string {
    let out = '';
    for (const ch of String(s || '')) {
      if (emojiRegex.test(ch)) {
        if (budget.n > 0) { out += ch; budget.n--; }
      } else {
        out += ch;
      }
    }
    return out;
  }

  // Cover: content balance display
  let edu = '';
  let ent = '';
  if (meta && meta.content_balance !== undefined && meta.content_balance !== null && meta.content_balance !== '') {
    const v = Number(meta.content_balance);
    if (!isNaN(v)) {
      const vc = Math.max(0, Math.min(100, Math.round(v)));
      edu = String(vc) + '% educational';
      ent = String(100 - vc) + '% entertaining';
    }
  }

  const children: any[] = [];

  // Cover + inputs
  children.push(new Paragraph({ text: 'QuickPostKit - 30-Day Plan', heading: HeadingLevel.TITLE }));
  children.push(p('Generated: ' + new Date().toISOString().slice(0, 10)));
  children.push(p('----------------------------------------'));
  children.push(p('Niche: ' + (meta.niche || '')));
  children.push(p('Audience: ' + (meta.audience || '')));
  children.push(p('Product or Service: ' + (meta.product_or_service || '')));
  children.push(p('Primary Platform: ' + (meta.primary_platform || '')));
  children.push(p('Tone: ' + (meta.tone || '')));
  children.push(p('Video Comfort: ' + (meta.video_comfort || '')));
  children.push(p('Monthly Goal: ' + (meta.monthly_goal || '')));
  children.push(p('Content Balance: ' + (edu ? (ent ? (edu + ' / ' + ent) : edu) : '')));
  children.push(p('Hashtag Style: ' + (meta.hashtag_style || '')));
  children.push(p('Special Instructions: ' + (meta.special_instructions || '')));
  children.push(p('Location: ' + (meta.location || '')));
  children.push(p(''));

  // Quick Guide - How To Use This Download
  children.push(h1('Quick Guide - How To Use This Download'));
  const quickGuide = [
    'Skim Day 1-3 and pick one to film today.',
    'Follow the Filming Directions step-by-step. Move slowly; keep each step about 1-3s.',
    'Add short on-screen text (Title Case, <= 6 words). Keep text in top/bottom safe area.',
    'Hook must be visible by 0-2s. Show motion or contrast early.',
    'If you need a trending sound, see Appendix A and pair it after editing.',
    'Aim for 5-7 steps total; hold the final result for 1s.',
    'Post at your audience peak hour. Reply to early comments within 20 minutes.'
  ];
  for (const s of quickGuide) children.push(p('- ' + s));
  children.push(p(''));

  // 30 Days
  for (let i = 0; i < plan.days.length; i++) {
    const d = plan.days[i];
    const budget = { n: allowOneEmoji ? 1 : 0 };
    const tags = (Array.isArray(d.hashtags) ? d.hashtags : []).join(' ');

    children.push(h1('Day ' + String(i + 1)));
    children.push(p('Hook: ' + stripExtraEmojis(d.hook, budget)));
    children.push(p('Caption: ' + stripExtraEmojis(d.caption, budget)));
    children.push(p('Video Idea: ' + d.video_idea));
    children.push(h2('Filming Directions'));

    const steps = Array.isArray(d.filming_directions) ? d.filming_directions : [];
    for (const s of steps) {
      const overlay = s.overlay ? (' | On-screen text: ' + stripExtraEmojis(s.overlay, budget)) : '';
      children.push(p('[' + String(s.start_s) + '-' + String(s.end_s) + 's] ' + stripExtraEmojis(s.instruction, budget) + overlay));
    }

    children.push(h2('Editing Notes'));
    for (const e of (Array.isArray(d.editing_notes) ? d.editing_notes : [])) children.push(p('- ' + stripExtraEmojis(String(e || ''), budget)));
    children.push(p('CTA: ' + stripExtraEmojis(d.cta, budget)));
    children.push(p('Hashtags: ' + tags));
    children.push(p('Posting Suggestion: ' + d.posting_suggestion));
    children.push(p('Platform Notes: ' + d.platform_notes));
    children.push(p(''));
  }

  // Platform-Specific Guide
  children.push(h1('Platform-Specific Guide'));
  children.push(h2('TikTok'));
  for (const s of [
    'Hook by 0-2s with motion or contrast.',
    '12-16s total; fast beats; align one text hit to the beat.',
    'Use rising sounds in your niche (see Appendix A).',
    'End with a clear action: save, share, comment a keyword.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Instagram Reels'));
  for (const s of [
    '8-12s; crisp cuts; color pop.',
    'Strong cover frame; readable title.',
    'Use native text styles; add location tag when relevant.',
    'Test 3 caption lengths: micro, short, story.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('YouTube Shorts'));
  for (const s of [
    '15-25s; allow one explanatory step.',
    'Clear narration or on-screen text for context.',
    'CTA to a longer video or resources in description.',
    'Consistent thumbnail style for the Shorts shelf.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('LinkedIn'));
  for (const s of [
    '20-45s explainers; lead with a stat, proof, or mini case.',
    'Subtitles required; many watch muted.',
    'Text above video: 2-line value summary.',
    'Tag people or companies only when relevant.'
  ]) children.push(p('- ' + s));

  // Extra spacing
  children.push(p(''));
  children.push(p(''));

  // Recycling Plan
  children.push(h1('Recycling Plan'));
  for (const s of [
    'Turn top 3 hooks into carousels (6-8 frames).',
    'Combine 3 similar tips into a 30s roundup.',
    'Make a before/after split-screen of your best result.',
    'Cut a vertical teaser for YouTube; link long-form.',
    'Convert 1 explainer into a talking-head plus B-roll remix.',
    'Reply-on-video to 5 comments as rapid Q and A.',
    'Turn 2 best captions into email subject lines and send.',
    'Save good shots to a B-roll library for future edits.'
  ]) children.push(p('- ' + s));

  // Extra spacing
  children.push(p(''));
  children.push(p(''));

  // Cheat Sheet
  children.push(h1('Cheat Sheet'));
  children.push(h2('Hooks'));
  for (const s of [
    'Start with an outcome or bold claim.',
    'Show the result first, then rewind.',
    'Flip an objection: You think X, but actually...'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Filming'));
  for (const s of [
    'Natural light if possible; face a window.',
    'Alternate distance: full view -> close detail -> action -> reaction.',
    'One motivated move per step; avoid digital zoom unless you are a photographer.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Editing'));
  for (const s of [
    'Average cut about 0.7-1.2s; reset visuals every 3-4s.',
    'Large readable text; keep in safe zones.',
    'Align at least one text hit to the beat.'
  ]) children.push(p('- ' + s));

  // Extra spacing
  children.push(p(''));
  children.push(p(''));

  // Evergreen Content Ideas
  children.push(h1('Evergreen Content Ideas'));
  for (const s of [
    'Myth vs Fact in your niche.',
    '3 quick tips that solve a common pain.',
    'Mini demo with before/after.',
    'FAQ bite with on-screen text only.',
    'Case study: problem -> process -> result.',
    'Price vs value breakdown in 20 seconds.',
    'Tool or gear loadout for beginners.',
    'Origin story: why you started.',
    'Challenge viewers to try one small action.',
    'Testimonial highlight with overlay text.'
  ]) children.push(p('- ' + s));

  // Extra spacing
  children.push(p(''));
  children.push(p(''));

  // Appendices A-F
  children.push(h1('Appendix A - How to Find Trending Sounds (Detailed)'));
  children.push(h2('TikTok'));
  for (const s of [
    'Use TikTok Creative Center: Songs -> Rising; set country and niche.',
    'Open a candidate audio; check top recent videos for pacing and caption patterns.',
    'Save 10-20 candidates labeled by vibe (high-energy, calm, storytelling).',
    'In-app search: niche keyword + "sound"; prefer steady week-over-week growth.',
    'Rule of fit: if the first 2s do not support your visual hook, skip it.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('Instagram Reels'));
  for (const s of [
    'Professional Dashboard -> Audio; pick 10k-150k uses trending upward.',
    'Tap audio name -> Save Audio; preview against your 0-2s hook.',
    'From a strong Reel, tap audio to inspect formats that win in your niche.',
    'Update your saved audio list weekly; remove tracks that cooled off.'
  ]) children.push(p('- ' + s));
  children.push(p(''));
  children.push(h2('YouTube Shorts'));
  for (const s of [
    'Use mobile "Sounds" picker -> Trending tab; confirm beats align with your step hits.',
    'Avoid overused tracks that drown narration; favor percussive cues for text hits.',
    'Check top Shorts using the sound in the last 7 days for format alignment.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix B - 10-Beats Script Framework (Expanded)'));
  for (const s of [
    'Hook (0-2s): outcome first or bold claim.',
    'Context: who this is for in 1 line.',
    'Promise: what they get today.',
    'Step 1: short command + on-screen label.',
    'Step 2: show with motion; avoid talking head if not comfortable.',
    'Step 3: close detail proof or counterexample.',
    'Proof: stat, time-lapse, or split-screen.',
    'Objection flip: You think X, but actually...',
    'Result: show payoff or before/after.',
    'CTA: one specific action tied to goal.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix C - Filming and Edit Cheats (Expanded)'));
  for (const s of [
    'Framing: alternate full view -> close detail -> action -> reaction.',
    'Movement: 1 motivated move per step (pan, tilt, push-in, handheld).',
    'Lighting: face a window; avoid mixed color temps.',
    'Text: 5-7 words per hit; keep in safe zones.',
    'Rhythm: cut on motion; add 1 beat-synced text hit at hook.',
    'SFX: one subtle whoosh or pop on payoff; do not spam.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix D - Weekly Batch Plan (Step-by-Step)'));
  for (const s of [
    'Mon: collect 10 hooks, 5 sound candidates, 5 proofs.',
    'Tue: outline 7 filming directions with 5-7 steps each.',
    'Wed: batch film in 60-90 minutes with fixed lighting.',
    'Thu: edit all in one block; export 8-16s where possible.',
    'Fri: schedule posts; prep 3 quick replies to common comments.',
    'Weekend: engage 20 minutes after posting; save best comments.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix E - Posting Checklist (Detailed)'));
  for (const s of [
    'Cover: readable title; contrasty frame.',
    'Hook: first text hit by 0-2s with motion.',
    'Length: stay in platform range; do not ramble.',
    'Captions: 1-2 sentences in natural voice.',
    'Hashtags: 4-6 niche-aware; mix volumes.',
    'CTA: 1 specific action; no doubles.',
    'Pin winners; remix top posts next week.'
  ]) children.push(p('- ' + s));

  children.push(h1('Appendix F - Filming Quick Guide'));
  for (const s of [
    'Start steady. Move slowly. Keep steps 1-3s.',
    'Alternate distance: full view -> close detail -> action -> reaction.',
    'Use natural light where possible; face a window.',
    'Do not pinch to zoom unless you are a photographer; step closer instead.',
    'Overlay text: Title Case, <= 6 words, max 1 emoji across the whole day.',
    'Place text in top/bottom safe areas, never over the subject.',
    'End on the result and hold for 1s.'
  ]) children.push(p('- ' + s));

  // Footer
  const cSign = String.fromCharCode(0x00A9);
  const footerText = cSign + ' 2025 Fifth Element Labs - Practical AI at the right price';
  const doc = new Document({
    sections: [
      {
        properties: {},
        footers: {
          default: new Footer({
            children: [ new Paragraph({ text: footerText, alignment: AlignmentType.CENTER }) ]
          })
        },
        children
      }
    ]
  });

  return Packer.toBuffer(doc);
}

/* ============================= HTTP Handler ============================= */

function isLowQualityDay(d: DayItem, index1: number): boolean {
  if (!d) return true;
  const hook = String(d.hook || "").trim();
  const caption = String(d.caption || "").trim();
  const idea = String(d.video_idea || "").trim();
  const steps = Array.isArray(d.filming_directions) ? d.filming_directions : [];
  // Detect our generic fallback patterns or empties
  const genericHook = /^Hook\s+\d+$/i.test(hook) || hook.length < 6;
  const genericCaption = /^Caption\s+\d+$/i.test(caption) || caption.length < 6;
  const genericIdea = /^(Idea\s+\d+|)$/.test(idea);
  const tooFewSteps = steps.length < 4;
  const genericStep = steps.length > 0 && steps.every(function(s){
    var ins = String(s && s.instruction || "").toLowerCase();
    return ins.indexOf("stand back") >= 0 || ins.indexOf("step 1") >= 0;
  });
  return genericHook || genericCaption || genericIdea || tooFewSteps || genericStep;
}

async function generateBatch(client: OpenAI, data: Inputs, startIndex: number, count: number): Promise<Plan> {
  const base = buildPrompt(data);
  const startDay = startIndex + 1;
  const endDay = startIndex + count;
  const rangeNote = [
    'BATCH RANGE: Generate days ' + String(startDay) + ' through ' + String(endDay) + ' inclusive.',
    'Return a single JSON object with a top-level "days" array containing exactly ' + String(count) + ' items.',
    'Each item must correspond to one day in this range, in order.',
    'Do not include any commentary or extra text.'
  ].join('\n');

  const completion = await client.chat.completions.create({
    model: 'gpt-4o-mini',
    response_format: { type: 'json_object' },
    messages: [
      { role: 'system', content: 'You are a precise JSON generator. Output beginner filming_directions (5-7 steps), not storyboard. Plain English steps, occasional quick checks, safety cues only if obvious. JSON only.' },
      { role: 'user', content: base + '\n' + rangeNote }
    ],
    temperature: 0.55
  });

  const raw = completion.choices[0]?.message?.content || '{}';
  let plan: Plan = { days: [] };
  try { plan = coercePlan(JSON.parse(raw)); } catch { plan = { days: [] }; }
  plan.days = Array.isArray(plan.days) ? plan.days.slice(0, count) : [];
  return plan;
}

async function regenerateOneDay(client: OpenAI, data: Inputs, dayNumber: number): Promise<DayItem | null> {
  // Ask for exactly one fully-formed day, anchored to the day number
  const base = buildPrompt(data);
  const hardNote = [
    'SINGLE DAY REQUEST: Generate exactly 1 item for Day ' + String(dayNumber) + '.',
    'Return JSON with top-level "days": [ { ...exactly one item... } ].',
    'Filming directions: 5-7 steps, plain English, precise and beginner-friendly.',
    'Timing ascends; hook visible by 0-2s; total fits the platform range.',
    'No boilerplate like "Hook ' + String(dayNumber) + '" or "Caption ' + String(dayNumber) + '".',
    'No generic steps like "Stand back / Step 1". Make it niche-aware and specific.'
  ].join('\n');

  const completion = await client.chat.completions.create({
    model: 'gpt-4o-mini',
    response_format: { type: 'json_object' },
    messages: [
      { role: 'system', content: 'You are a precise JSON generator. Output beginner filming_directions (5-7 steps). JSON only. No filler.' },
      { role: 'user', content: base + '\n' + hardNote }
    ],
    temperature: 0.5
  });

  const raw = completion.choices[0]?.message?.content || '{}';
  let plan: Plan = { days: [] };
  try { plan = coercePlan(JSON.parse(raw)); } catch { plan = { days: [] }; }
  const d = Array.isArray(plan.days) && plan.days[0] ? plan.days[0] : null;
  if (!d) return null;

  // Basic sanity: at least 4 steps and non-generic hook/caption
  if (isLowQualityDay(d, dayNumber)) return null;
  return d;
}

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(function(){ return {}; });
    const data: Inputs = body || {};

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    // 3 x 10 batches to avoid tail truncation
    const batch1 = await generateBatch(client, data, 0, 10);
    const batch2 = await generateBatch(client, data, 10, 10);
    const batch3 = await generateBatch(client, data, 20, 10);

    // Stitch
    let stitched: Plan = { days: [] };
    stitched.days = []
      .concat(batch1.days || [])
      .concat(batch2.days || [])
      .concat(batch3.days || []);

    // Pad/truncate to exactly 30
    stitched = ensureExactly30(stitched);

    // Targeted regeneration for any low-quality days (focus on 21â€“30 first)
    for (let i = 20; i < 30; i++) {
      const dayNumber = i + 1;
      const d = stitched.days[i];
      if (isLowQualityDay(d, dayNumber)) {
        // try up to 2 attempts to regenerate this specific day
        for (let attempt = 0; attempt < 2; attempt++) {
          const fresh = await regenerateOneDay(client, data, dayNumber);
          if (fresh && !isLowQualityDay(fresh, dayNumber)) {
            stitched.days[i] = fresh;
            break;
          }
        }
      }
    }

    // Final safety
    stitched = ensureExactly30(stitched);

    stitched = enforceVideoComfort(stitched, data.video_comfort || '');
    const buf = await buildDocx(stitched, data);
    const fileName = 'QuickPostKit_' + String(Date.now()) + '.docx';

    return new Response(buf, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'Content-Disposition': 'attachment; filename=' + fileName
      }
    });
  } catch (err: any) {
    const msg = err && err.message ? String(err.message) : 'Unknown error';
    return new Response(JSON.stringify({ error: msg }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}